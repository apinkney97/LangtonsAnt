/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AntConfig.java
 *
 * Created on 28-Jan-2011, 16:27:41
 */
package langtonsant;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Scanner;
import java.util.Vector;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author azp
 */
public class AntConfig extends javax.swing.JFrame {

    public static final int RULELENGTH = 5;
    private AntThread at;
    private int statecount;
    private int colourcount;
    private boolean running;

    /** Creates new form AntConfig */
    public AntConfig() {
        initComponents();
        at = new AntThread(450, 450);
        at.setPauseSteps((Integer) (pauseSteps.getValue()));
        at.setPauseTime((Integer) (pauseTime.getValue()));
        at.setSkipSteps((Integer) (skipSteps.getValue()));
        statecount = (Integer) (stateCount.getValue());
        colourcount = (Integer) (colourCount.getValue());
        running = false;
        setStates();
    }

    /** This method is called from within the constructor to
     * initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        openFileDialog = new javax.swing.JFileChooser();
        saveFileDialog = new javax.swing.JFileChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        ruleTable = new javax.swing.JTable();
        oneStateTextBox = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        oneStateOKButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        stateCount = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        colourCount = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        skipSteps = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        pauseTime = new javax.swing.JSpinner();
        jLabel7 = new javax.swing.JLabel();
        pauseSteps = new javax.swing.JSpinner();
        jLabel8 = new javax.swing.JLabel();
        importButton = new javax.swing.JButton();
        exportButton = new javax.swing.JButton();
        goButton = new javax.swing.JButton();

        openFileDialog.setDialogTitle("Import ruleset...");
        openFileDialog.setFileFilter(new CustomFileFilter(".tu", "Turmite rule files"));

        saveFileDialog.setDialogTitle("Export ruleset...");
        saveFileDialog.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ruleTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "Initial State", "Initial Colour", "Final Colour", "Turn Direction", "Final State"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(ruleTable);

        jLabel1.setText("One-state Turmite (use L, R, F and B)");

        oneStateOKButton.setText("OK");
        oneStateOKButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oneStateOKButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("States:");

        stateCount.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(2), Integer.valueOf(1), null, Integer.valueOf(1)));
        stateCount.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                stateCountStateChanged(evt);
            }
        });

        jLabel3.setText("Colours:");

        colourCount.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(2), Integer.valueOf(2), null, Integer.valueOf(1)));
        colourCount.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                colourCountStateChanged(evt);
            }
        });

        jLabel4.setText("Only draw every");

        skipSteps.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(100), Integer.valueOf(1), null, Integer.valueOf(1)));
        skipSteps.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                skipStepsStateChanged(evt);
            }
        });

        jLabel5.setText("th step.");

        jLabel6.setText("Pause for");

        pauseTime.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(0), null, Integer.valueOf(1)));
        pauseTime.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                pauseTimeStateChanged(evt);
            }
        });

        jLabel7.setText("ms every");

        pauseSteps.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(100), Integer.valueOf(1), null, Integer.valueOf(1)));
        pauseSteps.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                pauseStepsStateChanged(evt);
            }
        });

        jLabel8.setText("steps");

        importButton.setText("Import...");
        importButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importButtonActionPerformed(evt);
            }
        });

        exportButton.setText("Export...");
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportButtonActionPerformed(evt);
            }
        });

        goButton.setText("GO");
        goButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 581, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(oneStateTextBox, javax.swing.GroupLayout.DEFAULT_SIZE, 343, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(oneStateOKButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stateCount, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(colourCount, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE)
                        .addGap(195, 195, 195)
                        .addComponent(importButton)
                        .addGap(18, 18, 18)
                        .addComponent(exportButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(goButton)
                        .addGap(114, 114, 114)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(skipSteps, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pauseTime, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pauseSteps, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(oneStateTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(oneStateOKButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(stateCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(colourCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(exportButton)
                    .addComponent(importButton))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(pauseSteps, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(goButton)
                    .addComponent(jLabel7)
                    .addComponent(pauseTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel5)
                    .addComponent(skipSteps, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void oneStateOKButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oneStateOKButtonActionPerformed

        statecount = 1;
        String rs = oneStateTextBox.getText();
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < rs.length(); i++) {
            switch (rs.charAt(i)) {
                case 'R':
                case 'r':
                case 'L':
                case 'l':
                case 'F':
                case 'f':
                case 'B':
                case 'b':
                    sb.append(rs.charAt(i));
            }
        }

        rs = sb.toString();
        
        //Set number of states/colours in text box as appropriate
        stateCount.setValue(1);
        colourCount.setValue(rs.length());
        
        DefaultTableModel t = (DefaultTableModel) (ruleTable.getModel());
        t.getDataVector().removeAllElements();

        int i;
        for (i = 0; i < rs.length() - 1; i++) {
            t.addRow(new Object[]{0, i, i + 1, getDir(rs.charAt(i)), 0});
        }
        //Link back to beginning
        t.addRow(new Object[]{0, i, 0, getDir(rs.charAt(i)), 0});

        
    }//GEN-LAST:event_oneStateOKButtonActionPerformed

    private void stateCountStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_stateCountStateChanged
        statecount = (Integer) (stateCount.getValue());
        setStates();
    }//GEN-LAST:event_stateCountStateChanged

    private void colourCountStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_colourCountStateChanged
        colourcount = (Integer) (colourCount.getValue());
        setStates();
    }//GEN-LAST:event_colourCountStateChanged

    private void importButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importButtonActionPerformed
        if (openFileDialog.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File f = openFileDialog.getSelectedFile();
            ArrayList<int[]> lines = new ArrayList<int[]>();
            try {
                Scanner sc = new Scanner(f.getCanonicalFile());

                while (sc.hasNextLine()) {
                    String l = sc.nextLine().trim();
                    if (l.charAt(0) != '{' || l.charAt(l.length() - 1) != '}') {
                        System.out.println("Need brackets!!!"); //Well, we don't really, but let's not let people be sloppy
                        return;
                    }

                    //Check for right number of values
                    String[] bits = l.substring(1, l.length() - 1).split(",");
                    if (bits.length != RULELENGTH) {
                        System.out.println("Wrong number of values!!!!!!");
                        return;
                    }


                    //Ensure all bits are integers
                    int[] nums = new int[RULELENGTH];
                    for (int i = 0; i < RULELENGTH; i++) {
                        try {
                            //System.out.println("["+bits[i]+"]");
                            nums[i] = Integer.parseInt(bits[i].trim());
                        } catch (NumberFormatException e) {
                            System.out.println("Error interpreting \"" + bits[i] + "\" as a number!!!!!!!!!!!!!!!");
                            return;
                        }
                    }
                    lines.add(nums);
                }



            } catch (IOException e) {
                e.printStackTrace();
                return;
            }


            //Now comes the fun part:

            //States must be numbered 0 - (n-1)
            //Colours must be numbered 0 - (m-1)
            //Must be n*m rules (1 per state/color pair)
            //Directions should only be 1, 2, 4 or 8, but might as well allow anything (should be safe; other numbers will be ignored)
            int istatemin = 0;
            int istatemax = 0;

            int fstatemin = 0;
            int fstatemax = 0;

            int icolmin = 0;
            int icolmax = 0;

            int fcolmin = 0;
            int fcolmax = 0;

            HashSet<Integer> states = new HashSet<Integer>();
            HashSet<Integer> colours = new HashSet<Integer>();
            HashSet<String> combos = new HashSet<String>();
            
            for (int[] line : lines) {
                if (line[0] < istatemin) {
                    istatemin = line[0];
                }
                if (line[0] > istatemax) {
                    istatemax = line[0];
                }
                if (line[1] < icolmin) {
                    icolmin = line[1];
                }
                if (line[1] > icolmax) {
                    icolmax = line[1];
                }
                if (line[2] < fcolmin) {
                    fcolmin = line[2];
                }
                if (line[2] > fcolmax) {
                    fcolmax = line[2];
                }
                if (line[4] < fstatemin) {
                    fstatemin = line[4];
                }
                if (line[4] > fstatemax) {
                    fstatemax = line[4];
                }
                
                states.add(line[0]);
                states.add(line[4]);
                colours.add(line[1]);
                colours.add(line[2]);
                
                combos.add(line[0]+","+line[1]);
            }
            
            if(colours.size() < 2) {
                System.out.println("There must be at least 2 colours");
                return;
            }
            

            if (istatemin != 0 || (istatemax + 1) != states.size()) {
                System.out.println("There must be n input states (numbered 0 to n-1)");
                return;
            }
            if (icolmin != 0 || (icolmax + 1) != colours.size()) {
                System.out.println("There must be m input colours (numbered 0 to m-1)");
                return;
            }
            if (fstatemin < 0 || fstatemax > istatemax) {
                System.out.println("Output state \"" + fstatemax + "\" has no matching input state");
                return;
            }
            if (fcolmin < 0 || fcolmax > icolmax) {
                System.out.println("Output colour \"" + fcolmax + "\" has no matching input colour");
                return;
            }

            //Now check that there is one rule per pair of input states:
            for(int i=0; i<states.size(); i++) {
                for(int j=0; j<colours.size(); j++) {
                    if(!combos.contains(i+","+j)) {
                        System.out.println("Error: missing state/colour pair "+i+", "+j);
                        return;
                    }
                }
            }
            
            //Set number of states/colours in text box as appropriate
            stateCount.setValue(states.size());
            colourCount.setValue(colours.size());
            
            //Now import the rules into the table
            DefaultTableModel t = (DefaultTableModel) (ruleTable.getModel());
            t.getDataVector().removeAllElements();

            for (int[] line:lines) {
                t.addRow(new Object[]{line[0], line[1], line[2], line[3], line[4]});
            }
            
            

        } else {
            //they hit cancel...
        }
    }//GEN-LAST:event_importButtonActionPerformed

    private void exportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportButtonActionPerformed
        // TODO add confirm overwrite dialog
        if (saveFileDialog.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            File f = saveFileDialog.getSelectedFile();
            try {
                if (f.exists()) {
                    //Warn user... probably should do with a GUI.
                    System.out.println("File " + f.getCanonicalPath() + " already exists...");
                }
                //Save rules to file
                FileWriter fw = new FileWriter(f.getAbsoluteFile(), false);
                fw.write(getRuleSet().getRulesAsText());
                fw.close();

                //System.out.println(getRuleSet().getRulesAsText());

            } catch (IOException e) {
                e.printStackTrace();
            }
        } else {
            //they hit cancel
            System.out.println("You hit cancel :(");
        }


    }//GEN-LAST:event_exportButtonActionPerformed

    private void skipStepsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_skipStepsStateChanged
        at.setSkipSteps((Integer) (skipSteps.getValue()));
    }//GEN-LAST:event_skipStepsStateChanged

    private void pauseTimeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_pauseTimeStateChanged
        at.setPauseTime((Integer) (pauseTime.getValue()));
    }//GEN-LAST:event_pauseTimeStateChanged

    private void pauseStepsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_pauseStepsStateChanged
        at.setPauseSteps((Integer) (pauseSteps.getValue()));
    }//GEN-LAST:event_pauseStepsStateChanged

    private void goButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goButtonActionPerformed
        if (running) {
            //Kill the thread
            at.stop();
            running = false;
            //Re-enable the controls
            /*oneStateOKButton.setEnabled(true);
            oneStateTextBox.setEnabled(true);
            colourCount.setEnabled(true);
            stateCount.setEnabled(true);
            ruleTable.setEnabled(true);
            importButton.setEnabled(true);
            goButton.setText("GO");*/
            goButton.setEnabled(false);
        } else {
            //Disable most of the controls
            oneStateOKButton.setEnabled(false);
            oneStateTextBox.setEnabled(false);
            colourCount.setEnabled(false);
            stateCount.setEnabled(false);
            ruleTable.setEnabled(false);
            importButton.setEnabled(false);

            at.setRules(getRuleSet());

            goButton.setText("Stop");

            //Now actually run
            running = true;
            new Thread(at).start();
        }
    }//GEN-LAST:event_goButtonActionPerformed
    /**
     * @param args the command line arguments
     */
    /*    public static void main(String args[]) {
    java.awt.EventQueue.invokeLater(new Runnable() {
    public void run() {
    new AntConfig().setVisible(true);
    }
    });
    }*/
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner colourCount;
    private javax.swing.JButton exportButton;
    private javax.swing.JButton goButton;
    private javax.swing.JButton importButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton oneStateOKButton;
    private javax.swing.JTextField oneStateTextBox;
    private javax.swing.JFileChooser openFileDialog;
    private javax.swing.JSpinner pauseSteps;
    private javax.swing.JSpinner pauseTime;
    private javax.swing.JTable ruleTable;
    private javax.swing.JFileChooser saveFileDialog;
    private javax.swing.JSpinner skipSteps;
    private javax.swing.JSpinner stateCount;
    // End of variables declaration//GEN-END:variables

    private void setStates() {
        DefaultTableModel t = (DefaultTableModel) (ruleTable.getModel());
        t.getDataVector().removeAllElements();

        for (int i = 0; i < statecount; i++) {
            for (int j = 0; j < colourcount; j++) {
                t.addRow(new Object[]{i, j, 0, 0, 0});
            }
        }
    }

    private int getDir(char c) {
        int d = 0;
        switch (c) {
            case 'L':
            case 'l':
                d = 2;
                break;
            case 'R':
            case 'r':
                d = 8;
                break;
            case 'F':
            case 'f':
                d = 1;
                break;
            case 'B':
            case 'b':
                d = 4;
                break;
            default:
                System.out.println(c + " does not represent a valid direction!");
                System.exit(-2);
        }
        return d;
    }

    private AntRuleSet getRuleSet() {
        AntRuleSet rs = new AntRuleSet();
        DefaultTableModel t = (DefaultTableModel) (ruleTable.getModel());
        Vector<Vector<Object>> v = t.getDataVector();
        for (int i = 0; i < v.size(); i++) {
            rs.addRule((Integer) (v.get(i).get(0)), (Integer) (v.get(i).get(1)), (Integer) (v.get(i).get(2)), (Integer) (v.get(i).get(3)), (Integer) (v.get(i).get(4)));
        }
        return rs;
    }
}
